-In static risorse html --> solo robe per il client,
Static resources (like HTML, CSS, and JavaScript files) that are served directly to the client. These go in the resources/static folder.
Templates that are filled in with data by your application before being sent to the client. These go in the resources/templates folder.

-La cartella static è la root dal punto di vista delle risorse

@Controller
-Controller (non restController):
	Classe che come restController ritorna della roba in base ai path, ma ritorna html


	@GetMapping("/hello.html")
	@ResponseBody // Ritorna direttamente il corpo della risposta, se non messo ciò che viene ritornato è considerato il nome di un file nella cartella template
	public String hello(@RequestParam ... come restController)
	{
		return "<b>Ciao</b<>";
	}
	
	@GetMapping("/hello2.html")
	public String hello(@RequestParam ... come restController)
	{
		// Non metto response body, in questo caso mi ritornerà il contenuto del file che ha come nome la stringa ritornata
		return "file";
	}
	
Questa roba è gestita da thymeleaf
Detto ciò possiamo usare thymeleaf per creare dei template

Devi includere l'apposita dependency:
-spring-boot-starter-thymeleaf

Se non funziona un cazzo:
	Java projects (nel menu ctrl+b in basso) Clean workspace --> Reload and delete --> F5

Altri appunti:
--------------
Model (templates) - View (HTML) - Controller (controller class)

Spring Boot supports several templating engines such as Thymeleaf, 
FreeMarker, and Mustache. When a controller method returns a string, 
Spring Boot interprets this as the name of the template to be used. 
It then looks for a file with this name in the templates folder, 
fills in the placeholders with data, and sends the resulting HTML to the client.
A placeholder in the context of a template engine like Thymeleaf, FreeMarker, or Mustache is not an HTML element itself, but a special syntax within the HTML that the template engine will replace with actual data when rendering the template.
For example, in Thymeleaf, you might have an HTML element like this: 

<p th:text="${message}">Placeholder text</p>

In this case, ${message} is a placeholder. When Thymeleaf renders this template, it will replace ${message} with the actual value of the message attribute from the model. The text "Placeholder text" is just there as a fallback and won't be displayed when the template is rendered.
You ensure you're referencing the correct placeholder by matching the name in the placeholder with the name of an attribute in your model. In the Spring MVC controller, you would add an attribute to the model like this:

model.addAttribute("message", "Hello, World!");
 
